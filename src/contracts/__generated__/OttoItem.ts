/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OttoItemInterface extends utils.Interface {
  functions: {
    "ATTRS_SLOT_BRS()": FunctionFragment;
    "ATTRS_SLOT_CON()": FunctionFragment;
    "ATTRS_SLOT_CUTE()": FunctionFragment;
    "ATTRS_SLOT_DEF()": FunctionFragment;
    "ATTRS_SLOT_DEX()": FunctionFragment;
    "ATTRS_SLOT_INT()": FunctionFragment;
    "ATTRS_SLOT_LUK()": FunctionFragment;
    "ATTRS_SLOT_STR()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "OTTO()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "TRAIT_SLOT_BACKGROUND()": FunctionFragment;
    "TRAIT_SLOT_CLOTHES()": FunctionFragment;
    "TRAIT_SLOT_COAT_OF_ARMS()": FunctionFragment;
    "TRAIT_SLOT_CONSUMABLE()": FunctionFragment;
    "TRAIT_SLOT_EYES()": FunctionFragment;
    "TRAIT_SLOT_FACIAL_ACCESSORIES()": FunctionFragment;
    "TRAIT_SLOT_GENDER()": FunctionFragment;
    "TRAIT_SLOT_HEADWEAR()": FunctionFragment;
    "TRAIT_SLOT_HOLDING()": FunctionFragment;
    "TRAIT_SLOT_MOUTH()": FunctionFragment;
    "TRAIT_SLOT_PERSONALITY()": FunctionFragment;
    "TRAIT_SLOT_SKIN_COLOR()": FunctionFragment;
    "TRAIT_SLOT_SKIN_TYPE()": FunctionFragment;
    "TRAIT_SLOT_VOICE()": FunctionFragment;
    "applicable(uint256,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "consumable(uint256)": FunctionFragment;
    "decode(uint256)": FunctionFragment;
    "effect(uint256)": FunctionFragment;
    "encode(uint8,uint16)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantMinter(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(string,string,string,address)": FunctionFragment;
    "initialize(string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(address,uint256,uint256,bytes)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "parentTokenBalance(uint256,address,uint256)": FunctionFragment;
    "parentTokenIds(uint256,address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeMinter(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setEffect(uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferFromParent(address,uint256,address,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToParent(address,address,uint256,uint256,bytes)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "wearable(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ATTRS_SLOT_BRS"
      | "ATTRS_SLOT_CON"
      | "ATTRS_SLOT_CUTE"
      | "ATTRS_SLOT_DEF"
      | "ATTRS_SLOT_DEX"
      | "ATTRS_SLOT_INT"
      | "ATTRS_SLOT_LUK"
      | "ATTRS_SLOT_STR"
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "OTTO"
      | "PAUSER_ROLE"
      | "TRAIT_SLOT_BACKGROUND"
      | "TRAIT_SLOT_CLOTHES"
      | "TRAIT_SLOT_COAT_OF_ARMS"
      | "TRAIT_SLOT_CONSUMABLE"
      | "TRAIT_SLOT_EYES"
      | "TRAIT_SLOT_FACIAL_ACCESSORIES"
      | "TRAIT_SLOT_GENDER"
      | "TRAIT_SLOT_HEADWEAR"
      | "TRAIT_SLOT_HOLDING"
      | "TRAIT_SLOT_MOUTH"
      | "TRAIT_SLOT_PERSONALITY"
      | "TRAIT_SLOT_SKIN_COLOR"
      | "TRAIT_SLOT_SKIN_TYPE"
      | "TRAIT_SLOT_VOICE"
      | "applicable"
      | "balanceOf"
      | "balanceOfBatch"
      | "burn"
      | "burnBatch"
      | "consumable"
      | "decode"
      | "effect"
      | "encode"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantMinter"
      | "grantRole"
      | "hasRole"
      | "initialize(string,string,string,address)"
      | "initialize(string)"
      | "isApprovedForAll"
      | "mint"
      | "mintBatch"
      | "name"
      | "owner"
      | "parentTokenBalance"
      | "parentTokenIds"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeMinter"
      | "revokeRole"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setEffect"
      | "supportsInterface"
      | "symbol"
      | "transferFromParent"
      | "transferOwnership"
      | "transferToParent"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "uri"
      | "wearable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_BRS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_CON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_CUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_DEF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_DEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_INT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_LUK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTRS_SLOT_STR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OTTO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_BACKGROUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_CLOTHES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_COAT_OF_ARMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_CONSUMABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_EYES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_FACIAL_ACCESSORIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_GENDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_HEADWEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_HOLDING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_MOUTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_PERSONALITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_SKIN_COLOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_SKIN_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIT_SLOT_VOICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applicable",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "consumable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "effect",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "grantMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(string,string,string,address)",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentTokenBalance",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentTokenIds",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEffect",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFromParent",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToParent",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "wearable",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_BRS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_CON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_CUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_DEF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_DEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_INT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_LUK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTRS_SLOT_STR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OTTO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_BACKGROUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_CLOTHES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_COAT_OF_ARMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_CONSUMABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_EYES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_FACIAL_ACCESSORIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_GENDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_HEADWEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_HOLDING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_MOUTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_PERSONALITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_SKIN_COLOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_SKIN_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIT_SLOT_VOICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "applicable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "consumable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "effect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(string,string,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEffect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFromParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wearable", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface OttoItem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OttoItemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ATTRS_SLOT_BRS(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_CON(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_CUTE(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_DEF(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_DEX(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_INT(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_LUK(overrides?: CallOverrides): Promise<[number]>;

    ATTRS_SLOT_STR(overrides?: CallOverrides): Promise<[number]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OTTO(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TRAIT_SLOT_BACKGROUND(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_CLOTHES(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_COAT_OF_ARMS(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_CONSUMABLE(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_EYES(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_FACIAL_ACCESSORIES(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_GENDER(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_HEADWEAR(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_HOLDING(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_MOUTH(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_PERSONALITY(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_SKIN_COLOR(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_SKIN_TYPE(overrides?: CallOverrides): Promise<[number]>;

    TRAIT_SLOT_VOICE(overrides?: CallOverrides): Promise<[number]>;

    applicable(
      itemId_: BigNumberish,
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    consumable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    decode(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { slot_: number; code_: number }>;

    effect(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encode(
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "initialize(string,string,string,address)"(
      name_: string,
      symbol_: string,
      uri_: string,
      otto_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(string)"(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parentTokenBalance(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parentTokenIds(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEffect(
      tokenId_: BigNumberish,
      effect_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferFromParent(
      _fromContract: string,
      _fromTokenId: BigNumberish,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToParent(
      _from: string,
      _toContract: string,
      _toTokenId: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    wearable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ATTRS_SLOT_BRS(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_CON(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_CUTE(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_DEF(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_DEX(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_INT(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_LUK(overrides?: CallOverrides): Promise<number>;

  ATTRS_SLOT_STR(overrides?: CallOverrides): Promise<number>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  OTTO(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  TRAIT_SLOT_BACKGROUND(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_CLOTHES(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_COAT_OF_ARMS(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_CONSUMABLE(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_EYES(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_FACIAL_ACCESSORIES(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_GENDER(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_HEADWEAR(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_HOLDING(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_MOUTH(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_PERSONALITY(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_SKIN_COLOR(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_SKIN_TYPE(overrides?: CallOverrides): Promise<number>;

  TRAIT_SLOT_VOICE(overrides?: CallOverrides): Promise<number>;

  applicable(
    itemId_: BigNumberish,
    ottoId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    account: string,
    id: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    account: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  consumable(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  decode(
    id_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { slot_: number; code_: number }>;

  effect(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  encode(
    slot_: BigNumberish,
    code_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantMinter(
    minter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "initialize(string,string,string,address)"(
    name_: string,
    symbol_: string,
    uri_: string,
    otto_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(string)"(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parentTokenBalance(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parentTokenIds(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeMinter(
    minter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEffect(
    tokenId_: BigNumberish,
    effect_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferFromParent(
    _fromContract: string,
    _fromTokenId: BigNumberish,
    _to: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToParent(
    _from: string,
    _toContract: string,
    _toTokenId: BigNumberish,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

  wearable(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    ATTRS_SLOT_BRS(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_CON(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_CUTE(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_DEF(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_DEX(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_INT(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_LUK(overrides?: CallOverrides): Promise<number>;

    ATTRS_SLOT_STR(overrides?: CallOverrides): Promise<number>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    OTTO(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    TRAIT_SLOT_BACKGROUND(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_CLOTHES(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_COAT_OF_ARMS(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_CONSUMABLE(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_EYES(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_FACIAL_ACCESSORIES(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_GENDER(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_HEADWEAR(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_HOLDING(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_MOUTH(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_PERSONALITY(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_SKIN_COLOR(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_SKIN_TYPE(overrides?: CallOverrides): Promise<number>;

    TRAIT_SLOT_VOICE(overrides?: CallOverrides): Promise<number>;

    applicable(
      itemId_: BigNumberish,
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    consumable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decode(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { slot_: number; code_: number }>;

    effect(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

    encode(
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantMinter(minter_: string, overrides?: CallOverrides): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(string,string,string,address)"(
      name_: string,
      symbol_: string,
      uri_: string,
      otto_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string)"(uri: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parentTokenBalance(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentTokenIds(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMinter(minter_: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    setEffect(
      tokenId_: BigNumberish,
      effect_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferFromParent(
      _fromContract: string,
      _fromTokenId: BigNumberish,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToParent(
      _from: string,
      _toContract: string,
      _toTokenId: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<string>;

    wearable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    ATTRS_SLOT_BRS(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_CON(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_CUTE(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_DEF(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_DEX(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_INT(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_LUK(overrides?: CallOverrides): Promise<BigNumber>;

    ATTRS_SLOT_STR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OTTO(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_BACKGROUND(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_CLOTHES(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_COAT_OF_ARMS(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_CONSUMABLE(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_EYES(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_FACIAL_ACCESSORIES(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TRAIT_SLOT_GENDER(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_HEADWEAR(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_HOLDING(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_MOUTH(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_PERSONALITY(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_SKIN_COLOR(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_SKIN_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIT_SLOT_VOICE(overrides?: CallOverrides): Promise<BigNumber>;

    applicable(
      itemId_: BigNumberish,
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    consumable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decode(id_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    effect(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(string,string,string,address)"(
      name_: string,
      symbol_: string,
      uri_: string,
      otto_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(string)"(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parentTokenBalance(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentTokenIds(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEffect(
      tokenId_: BigNumberish,
      effect_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromParent(
      _fromContract: string,
      _fromTokenId: BigNumberish,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToParent(
      _from: string,
      _toContract: string,
      _toTokenId: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    wearable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ATTRS_SLOT_BRS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_CON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_CUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_DEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_DEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_LUK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATTRS_SLOT_STR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OTTO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAIT_SLOT_BACKGROUND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_CLOTHES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_COAT_OF_ARMS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_CONSUMABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_EYES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAIT_SLOT_FACIAL_ACCESSORIES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_GENDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAIT_SLOT_HEADWEAR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_HOLDING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_MOUTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAIT_SLOT_PERSONALITY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_SKIN_COLOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_SKIN_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRAIT_SLOT_VOICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applicable(
      itemId_: BigNumberish,
      ottoId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      account: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    consumable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decode(
      id_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effect(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      slot_: BigNumberish,
      code_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,string,address)"(
      name_: string,
      symbol_: string,
      uri_: string,
      otto_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string)"(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentTokenBalance(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentTokenIds(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeMinter(
      minter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEffect(
      tokenId_: BigNumberish,
      effect_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFromParent(
      _fromContract: string,
      _fromTokenId: BigNumberish,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToParent(
      _from: string,
      _toContract: string,
      _toTokenId: BigNumberish,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wearable(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
