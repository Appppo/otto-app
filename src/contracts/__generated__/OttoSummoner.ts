/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OttoSummonerInterface extends utils.Interface {
  functions: {
    "addLegendaryTraits(uint256[])": FunctionFragment;
    "candidateAmountOf(uint256)": FunctionFragment;
    "dao()": FunctionFragment;
    "emergencyWithdraw(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "initialize(address,address,address,address,bytes32,uint256)": FunctionFragment;
    "keyHash()": FunctionFragment;
    "legendaryTraits(uint256)": FunctionFragment;
    "open(uint256)": FunctionFragment;
    "otto()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "remainCleo()": FunctionFragment;
    "remainLottie()": FunctionFragment;
    "remainOtto()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestOpen(uint256)": FunctionFragment;
    "requestedTokenId(bytes32)": FunctionFragment;
    "summon(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vrfInfos(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLegendaryTraits"
      | "candidateAmountOf"
      | "dao"
      | "emergencyWithdraw"
      | "fee"
      | "initialize"
      | "keyHash"
      | "legendaryTraits"
      | "open"
      | "otto"
      | "owner"
      | "proxiableUUID"
      | "rawFulfillRandomness"
      | "remainCleo"
      | "remainLottie"
      | "remainOtto"
      | "renounceOwnership"
      | "requestOpen"
      | "requestedTokenId"
      | "summon"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vrfInfos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLegendaryTraits",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateAmountOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "legendaryTraits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "open", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "otto", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainCleo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainLottie",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainOtto",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "summon",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfInfos",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLegendaryTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legendaryTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remainCleo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainLottie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remainOtto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "summon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vrfInfos", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FulfillRandomness(bytes32,uint256,uint256)": EventFragment;
    "Open(address,uint256,uint256[],bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestOpen(address,uint256)": EventFragment;
    "Summon(address,uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillRandomness"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Summon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface FulfillRandomnessEventObject {
  requestId_: string;
  tokenId_: BigNumber;
  randomness_: BigNumber;
}
export type FulfillRandomnessEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FulfillRandomnessEventObject
>;

export type FulfillRandomnessEventFilter =
  TypedEventFilter<FulfillRandomnessEvent>;

export interface OpenEventObject {
  sender_: string;
  tokenId_: BigNumber;
  candidates_: BigNumber[];
  legendary_: boolean;
}
export type OpenEvent = TypedEvent<
  [string, BigNumber, BigNumber[], boolean],
  OpenEventObject
>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestOpenEventObject {
  sender_: string;
  tokenId_: BigNumber;
}
export type RequestOpenEvent = TypedEvent<
  [string, BigNumber],
  RequestOpenEventObject
>;

export type RequestOpenEventFilter = TypedEventFilter<RequestOpenEvent>;

export interface SummonEventObject {
  sender_: string;
  tokenId_: BigNumber;
  idx_: BigNumber;
  birthday_: BigNumber;
}
export type SummonEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SummonEventObject
>;

export type SummonEventFilter = TypedEventFilter<SummonEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface OttoSummoner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OttoSummonerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLegendaryTraits(
      traits_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidateAmountOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      otto_: string,
      dao_: string,
      vrfCoordinator_: string,
      link_: string,
      keyHash_: BytesLike,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    legendaryTraits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    open(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    otto(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainCleo(overrides?: CallOverrides): Promise<[number]>;

    remainLottie(overrides?: CallOverrides): Promise<[number]>;

    remainOtto(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestOpen(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestedTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    summon(
      tokenId_: BigNumberish,
      idx_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vrfInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        state: number;
        requestId: string;
        seed: BigNumber;
      }
    >;
  };

  addLegendaryTraits(
    traits_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidateAmountOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  dao(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    otto_: string,
    dao_: string,
    vrfCoordinator_: string,
    link_: string,
    keyHash_: BytesLike,
    fee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keyHash(overrides?: CallOverrides): Promise<string>;

  legendaryTraits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  open(
    tokenId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  otto(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainCleo(overrides?: CallOverrides): Promise<number>;

  remainLottie(overrides?: CallOverrides): Promise<number>;

  remainOtto(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestOpen(
    tokenId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestedTokenId(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  summon(
    tokenId_: BigNumberish,
    idx_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vrfInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber] & {
      state: number;
      requestId: string;
      seed: BigNumber;
    }
  >;

  callStatic: {
    addLegendaryTraits(
      traits_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    candidateAmountOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    dao(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(token_: string, overrides?: CallOverrides): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      otto_: string,
      dao_: string,
      vrfCoordinator_: string,
      link_: string,
      keyHash_: BytesLike,
      fee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keyHash(overrides?: CallOverrides): Promise<string>;

    legendaryTraits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    open(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    otto(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remainCleo(overrides?: CallOverrides): Promise<number>;

    remainLottie(overrides?: CallOverrides): Promise<number>;

    remainOtto(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestOpen(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestedTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    summon(
      tokenId_: BigNumberish,
      idx_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber] & {
        state: number;
        requestId: string;
        seed: BigNumber;
      }
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "FulfillRandomness(bytes32,uint256,uint256)"(
      requestId_?: BytesLike | null,
      tokenId_?: BigNumberish | null,
      randomness_?: null
    ): FulfillRandomnessEventFilter;
    FulfillRandomness(
      requestId_?: BytesLike | null,
      tokenId_?: BigNumberish | null,
      randomness_?: null
    ): FulfillRandomnessEventFilter;

    "Open(address,uint256,uint256[],bool)"(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      candidates_?: null,
      legendary_?: null
    ): OpenEventFilter;
    Open(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      candidates_?: null,
      legendary_?: null
    ): OpenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RequestOpen(address,uint256)"(
      sender_?: string | null,
      tokenId_?: BigNumberish | null
    ): RequestOpenEventFilter;
    RequestOpen(
      sender_?: string | null,
      tokenId_?: BigNumberish | null
    ): RequestOpenEventFilter;

    "Summon(address,uint256,uint256,uint256)"(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      idx_?: null,
      birthday_?: null
    ): SummonEventFilter;
    Summon(
      sender_?: string | null,
      tokenId_?: BigNumberish | null,
      idx_?: null,
      birthday_?: null
    ): SummonEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addLegendaryTraits(
      traits_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidateAmountOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      otto_: string,
      dao_: string,
      vrfCoordinator_: string,
      link_: string,
      keyHash_: BytesLike,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    legendaryTraits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    open(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    otto(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainCleo(overrides?: CallOverrides): Promise<BigNumber>;

    remainLottie(overrides?: CallOverrides): Promise<BigNumber>;

    remainOtto(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestOpen(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestedTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    summon(
      tokenId_: BigNumberish,
      idx_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vrfInfos(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLegendaryTraits(
      traits_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidateAmountOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      otto_: string,
      dao_: string,
      vrfCoordinator_: string,
      link_: string,
      keyHash_: BytesLike,
      fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    legendaryTraits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    open(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    otto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainCleo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainLottie(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainOtto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestOpen(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestedTokenId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    summon(
      tokenId_: BigNumberish,
      idx_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vrfInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
