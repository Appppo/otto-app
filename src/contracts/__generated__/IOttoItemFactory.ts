/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IOttoItemFactoryInterface extends utils.Interface {
  functions: {
    "order(address,uint256,address,uint256)": FunctionFragment;
    "ship(bytes32)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "order" | "ship"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "order",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ship", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ship", data: BytesLike): Result;

  events: {
    "CreateOrder(bytes32,address,uint256)": EventFragment;
    "EstablishOrder(bytes32,uint256)": EventFragment;
    "ShipOrder(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EstablishOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShipOrder"): EventFragment;
}

export interface CreateOrderEventObject {
  orderId: string;
  buyer: string;
  amount: BigNumber;
}
export type CreateOrderEvent = TypedEvent<
  [string, string, BigNumber],
  CreateOrderEventObject
>;

export type CreateOrderEventFilter = TypedEventFilter<CreateOrderEvent>;

export interface EstablishOrderEventObject {
  orderId: string;
  randomness: BigNumber;
}
export type EstablishOrderEvent = TypedEvent<
  [string, BigNumber],
  EstablishOrderEventObject
>;

export type EstablishOrderEventFilter = TypedEventFilter<EstablishOrderEvent>;

export interface ShipOrderEventObject {
  orderId: string;
  buyer: string;
}
export type ShipOrderEvent = TypedEvent<[string, string], ShipOrderEventObject>;

export type ShipOrderEventFilter = TypedEventFilter<ShipOrderEvent>;

export interface IOttoItemFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOttoItemFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    order(
      from_: string,
      fromProductId_: BigNumberish,
      to_: string,
      productAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ship(
      orderId_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  order(
    from_: string,
    fromProductId_: BigNumberish,
    to_: string,
    productAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ship(
    orderId_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    order(
      from_: string,
      fromProductId_: BigNumberish,
      to_: string,
      productAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ship(orderId_: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CreateOrder(bytes32,address,uint256)"(
      orderId?: BytesLike | null,
      buyer?: string | null,
      amount?: null
    ): CreateOrderEventFilter;
    CreateOrder(
      orderId?: BytesLike | null,
      buyer?: string | null,
      amount?: null
    ): CreateOrderEventFilter;

    "EstablishOrder(bytes32,uint256)"(
      orderId?: BytesLike | null,
      randomness?: null
    ): EstablishOrderEventFilter;
    EstablishOrder(
      orderId?: BytesLike | null,
      randomness?: null
    ): EstablishOrderEventFilter;

    "ShipOrder(bytes32,address)"(
      orderId?: BytesLike | null,
      buyer?: string | null
    ): ShipOrderEventFilter;
    ShipOrder(
      orderId?: BytesLike | null,
      buyer?: string | null
    ): ShipOrderEventFilter;
  };

  estimateGas: {
    order(
      from_: string,
      fromProductId_: BigNumberish,
      to_: string,
      productAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ship(
      orderId_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    order(
      from_: string,
      fromProductId_: BigNumberish,
      to_: string,
      productAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ship(
      orderId_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
